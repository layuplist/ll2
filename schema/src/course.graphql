# * TYPES

"""
A course, denoted by a combination of department and number.
"""
type Course {
  id: ID!
  """
  Offering department.
  """
  department: String!
  """
  Course number.
  """
  number: Float!
  """
  Connection to crosslisted courses.
  """
  xlist: CourseGroup
  """
  Course quality score, aggregated for reviews across all offerings.
  """
  qualityScore: Int!
  """
  Course layup score, aggregated for reviews across all offerings.
  """
  layupScore: Int!
  """
  Instances of this course, these provide ties to professors, timeslots, reviews, etc.
  """
  offerings(term: Int): [Offering]
  """
  Terms offered (this field is also available via offerings, and is duplicated here to improve filter efficiency)
  """
  terms: [Int]!
}

type CourseGroup {
  """
  Crosslisted courses.
  """
  courseIds: [ID!]!
}

# * QUERIES

input CourseFilterInput {
  department: String
  number: Float
  term: Int
}

extend type Query {
  getCourse(id: ID!): Course
  getCourses(ids: [ID!]!): [Course]!
  listCourses(filter: CourseFilterInput, sortBy: String): [Course]!
}

# * MUTATIONS

input CourseGroupInput {
  courseIds: [ID!]!
}

input AddCourseInput {
  department: String!
  number: Float!
  xlist: CourseGroupInput
  qualityScore: Int = 0
  layupScore: Int = 0
  terms: [Int]
}

input UpdateCourseInput {
  xlist: CourseGroupInput
  qualityScore: Int
  layupScore: Int
  terms: [Int]
}

extend type Mutation {
  addCourse(course: AddCourseInput!): MutationResponseWithId!
  updateCourse(id: ID!, course: UpdateCourseInput!): MutationResponse!
  deleteCourse(id: ID!): MutationResponse!
}
